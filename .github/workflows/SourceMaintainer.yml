name: Source index Maintainer (DO NOT TOUCH)

on:
  push:
    paths:
      - 'Directorys/Files/**'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-index:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install image processor (sharp)
        run: npm install sharp@0.33

      - name: Generate Directorys/SourceList.json
        shell: bash
        run: |
          set -euo pipefail
          FILE_DIR="Directorys/Files"
          INDEX_FILE="Directorys/SourceList.json"

          if [[ ! -d "$FILE_DIR" ]]; then
            echo "Directory '$FILE_DIR' does not exist; nothing to index."
            exit 0
          fi

          node <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const http = require('http');
          const https = require('https');
          const sharp = require('sharp');

          const FILE_DIR = 'Directorys/Files';
          const INDEX_FILE = 'Directorys/SourceList.json';

          function fetchBuffer(url, timeoutMs = 12000, maxRedirects = 4) {
            return new Promise((resolve, reject) => {
              const visited = new Set();
              function doRequest(target, redirectsLeft) {
                try {
                  if (visited.has(target)) return reject(new Error('redirect loop'));
                  visited.add(target);
                  const lib = target.startsWith('https:') ? https : http;
                  const req = lib.get(target, {
                    headers: {
                      'User-Agent': 'Mozilla/5.0 (GitHubActions; +https://github.com) RSP-SourceMaintainer',
                      'Accept': 'image/*,*/*;q=0.8',
                      'Connection': 'close'
                    }
                  }, res => {
                    const status = res.statusCode || 0;
                    if ([301,302,303,307,308].includes(status) && res.headers.location && redirectsLeft > 0) {
                      const next = new URL(res.headers.location, target).href;
                      res.resume();
                      return doRequest(next, redirectsLeft - 1);
                    }
                    if (status !== 200) {
                      res.resume();
                      return reject(new Error('HTTP ' + status));
                    }
                    const chunks = [];
                    res.on('data', d => chunks.push(d));
                    res.on('end', () => {
                      const buf = Buffer.concat(chunks);
                      const ct = res.headers['content-type'] || '';
                      resolve({ buf, contentType: ct });
                    });
                  });
                  req.on('error', reject);
                  req.setTimeout(timeoutMs, () => req.destroy(new Error('timeout')));
                } catch (e) { reject(e); }
              }
              // normalize protocol-relative URLs
              if (url && url.startsWith('//')) url = 'https:' + url;
              doRequest(url, maxRedirects);
            });
          }

          function guessMimeFromExt(p) {
            const ext = path.extname(p).toLowerCase();
            switch (ext) {
              case '.jpg':
              case '.jpeg': return 'image/jpeg';
              case '.png': return 'image/png';
              case '.webp': return 'image/webp';
              case '.gif': return 'image/gif';
              default: return 'application/octet-stream';
            }
          }

          (async () => {
            const files = fs.readdirSync(FILE_DIR)
              .filter(f => f.toLowerCase().endsWith('.json') && f.toLowerCase() !== 'exampledir.json');

            const result = { sources: [] };

            for (const file of files) {
              try {
                const full = path.join(FILE_DIR, file);
                const raw = fs.readFileSync(full, 'utf8');
                const json = JSON.parse(raw);

                const title = json.title || path.parse(file).name;
                const cats = Array.isArray(json.categories) ? json.categories : [];
                const categoryCount = cats.length;
                let episodeCount = 0;
                for (const c of cats) {
                  if (Array.isArray(c.episodes)) episodeCount += c.episodes.length;
                }

                // Fetch poster and inline as data URI if available; fall back to URL if fetching fails
                let image = null;
                const imgUrl = (json.Image && json.Image !== 'N/A') ? json.Image : (json.image && json.image !== 'N/A' ? json.image : null);
                if (imgUrl) {
                  try {
                    let sourceBuffer;

                    if (imgUrl.startsWith('data:')) {
                      const m = imgUrl.match(/^data:.*?;base64,(.*)$/);
                      if (!m) throw new Error('Unsupported data URI format');
                      sourceBuffer = Buffer.from(m[1], 'base64');
                    } else {
                      const { buf } = await fetchBuffer(imgUrl);
                      sourceBuffer = buf;
                    }

                    // Resize to 512px height (auto width to preserve aspect ratio), convert to WebP
                    const webpBuf = await sharp(sourceBuffer)
                      .resize({ height: 512 })
                      .webp({ quality: 80 })
                      .toBuffer();

                    image = `data:image/webp;base64,${webpBuf.toString('base64')}`;
                  } catch (e) {
                    console.warn('Poster inline failed for', file, '-> using remote URL:', e.message);
                    image = imgUrl; // fallback to remote URL instead of null
                  }
                }

                result.sources.push({
                  file,
                  path: `./Files/${file}`,
                  title,
                  image,            // base64 data URI or remote URL
                  categoryCount,
                  episodeCount
                });
              } catch (e) {
                console.warn('Skipping', file, e.message);
              }
            }

            // Sort by title for stable ordering
            result.sources.sort((a, b) => String(a.title).localeCompare(String(b.title)));

            fs.writeFileSync(INDEX_FILE, JSON.stringify(result, null, 2));
          })().catch(err => { console.error(err); process.exit(1); });
          NODE

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'chore: update Directorys/SourceList.json'
          file_pattern: 'Directorys/SourceList.json'
